version: '3.8'

networks:
  frontend:
    # Rede para exposição externa (API Gateway)
  database:
    internal: true  
  message_bus:
    internal: true  

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 20s
      timeout: 10s
      retries: 3

  # PostgreSQL específico para tracking (mantendo separado para isolamento)
  tracking_postgres:
    image: postgres:15-alpine
    container_name: tracking_postgres
    environment:
      POSTGRES_DB: tracking_service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - "5433:5432"  # Porta específica para evitar conflitos
    volumes:
      - tracking_postgres_data:/var/lib/postgresql/data
    networks:
      - database
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d tracking_service"]
      interval: 20s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7
    command: mongod --auth --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - database
    ports:
      - "${MONGO_PORT}:27017"
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' --quiet
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  auth-service:
    build: 
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=${AUTH_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - MONGODB_URI=mongodb://auth_user:auth_password@mongodb:27017/auth_db?authSource=auth_db
      - CORS_ORIGINS=http://localhost:${AUTH_SERVICE_PORT},http://localhost:${API_GATEWAY_PORT}
    networks:
      - database
      - frontend
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${AUTH_SERVICE_PORT}/auth/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 15s

  order-service:
    build:
      context: ./order-service/order
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - AZURE_SERVICEBUS_CONNECTION_STRING=${AZURE_SERVICEBUS_CONNECTION_STRING}
      - SUPABASE_CODE_DELIVERY_APP=${SUPABASE_CODE_DELIVERY_APP}
      - SUPABASE_API_KEY_DELIVERY_APP=${SUPABASE_API_KEY_DELIVERY_APP}
      - SUPABASE_ORDERPHOTOS_BUCKET_NAME=${SUPABASE_ORDERPHOTOS_BUCKET_NAME}

    networks:
      - database
      - message_bus
      - frontend
    depends_on:
      postgres:
        condition: service_healthy

  tracking-service:
    build:
      context: ./tracking-service
      dockerfile: Dockerfile
    container_name: tracking_service
    environment:
      - NODE_ENV=production
      - PORT=${TRACKING_SERVICE_PORT}
      - DB_HOST=tracking_postgres
      - DB_PORT=5432
      - DB_NAME=tracking_service
      - DB_USER=root
      - DB_PASSWORD=root
      - JWT_SECRET=${JWT_SECRET}
      - API_URL=http://localhost:${TRACKING_SERVICE_PORT}
    ports:
      - "${TRACKING_SERVICE_PORT}:${TRACKING_SERVICE_PORT}"
    networks:
      - database
      - message_bus
      - frontend
    depends_on:
      tracking_postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${TRACKING_SERVICE_PORT}/api/tracking/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 15s
    command: >
      sh -c "
        echo 'Aguardando PostgreSQL estar pronto...' &&
        while ! nc -z tracking_postgres 5432; do
          sleep 1
        done &&
        echo 'PostgreSQL está pronto!' &&
        npm start
      "
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - AUTH_SERVICE_URL=http://auth-service:${AUTH_SERVICE_PORT}
      - ORDER_SERVICE_URL=http://order-service:${ORDER_SERVICE_PORT}
      - TRACKING_SERVICE_URL=http://tracking-service:${TRACKING_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - frontend
    ports:
      - "${API_GATEWAY_PORT}:8080"
    depends_on:
      - auth-service
      - order-service
      - tracking-service

volumes:
  postgres_data:
  tracking_postgres_data:
  mongodb_data: